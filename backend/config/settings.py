# """
# Django settings for config project.

# Generated by 'django-admin startproject' using Django 5.0.6.

# For more information on this file, see
# https://docs.djangoproject.com/en/5.0/topics/settings/

# For the full list of settings and their values, see
# https://docs.djangoproject.com/en/5.0/ref/settings/
# """
# """
# Django settings for config project. (DEVELOPMENT)

# Generated by 'django-admin startproject' using Django 5.0.6.
# """

# import os
# from pathlib import Path
# from datetime import timedelta

# # Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent
# SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')
# DEBUG = True

# # 開発用のホストを許可
# ALLOWED_HOSTS = ['localhost', '127.0.0.1']

# # Application definition
# INSTALLED_APPS = [
#     'django.contrib.admin',
#     'django.contrib.auth',
#     'django.contrib.contenttypes',
#     'django.contrib.sessions',
#     'django.contrib.messages',
#     'django.contrib.staticfiles',
#     'django.contrib.sites',

#     # Third-party apps
#     "corsheaders",
#     "rest_framework",
#     "rest_framework.authtoken",
#     "rest_framework_simplejwt",
#     "rest_framework_simplejwt.token_blacklist",
#     "dj_rest_auth",
#     "allauth",
#     "allauth.account",
#     "allauth.socialaccount",
#     'django_extensions',
#     'adminlog.apps.AdminlogConfig',

#     # Your apps
#     'api',
# ]

# MIDDLEWARE = [
#     'django.middleware.security.SecurityMiddleware',
#     # WhiteNoiseミドルウェアは開発環境では通常不要
#     # 'whitenoise.middleware.WhiteNoiseMiddleware',
#     'django.contrib.sessions.middleware.SessionMiddleware',
#     "corsheaders.middleware.CorsMiddleware",
#     'django.middleware.common.CommonMiddleware',
#     'django.middleware.csrf.CsrfViewMiddleware',
#     'django.contrib.auth.middleware.AuthenticationMiddleware',
#     'django.contrib.messages.middleware.MessageMiddleware',
#     'django.middleware.clickjacking.XFrameOptionsMiddleware',
#     'allauth.account.middleware.AccountMiddleware',
# ]

# ROOT_URLCONF = 'config.urls'

# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': [],
#         'APP_DIRS': True,
#         'OPTIONS': {
#             'context_processors': [
#                 'django.template.context_processors.debug',
#                 'django.template.context_processors.request',
#                 'django.contrib.auth.context_processors.auth',
#                 'django.contrib.messages.context_processors.messages',
#             ],
#         },
#     },
# ]

# WSGI_APPLICATION = 'config.wsgi.application'
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'HOST': os.environ.get('POSTGRES_HOST'),
#         'USER': os.environ.get('POSTGRES_USER'),
#         'NAME': os.environ.get('POSTGRES_DB'),
#         'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
#         'PORT': os.environ.get('POSTGRES_PORT')
#     }
# }
# AUTH_PASSWORD_VALIDATORS = [
#     {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
#     {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
#     {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
#     {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
# ]

# AUTH_USER_MODEL = 'api.CustomUser'
# AUTHENTICATION_BACKENDS = (
#     "django.contrib.auth.backends.ModelBackend",
#     "allauth.account.auth_backends.AuthenticationBackend"
# )
# SITE_ID = 1
# ACCOUNT_EMAIL_VERIFICATION = 'optional'
# ACCOUNT_AUTHENTICATION_METHOD = 'email'
# ACCOUNT_USERNAME_REQUIRED = False
# ACCOUNT_EMAIL_REQUIRED = True
# ACCOUNT_UNIQUE_EMAIL = True
# LANGUAGE_CODE = 'ja'
# TIME_ZONE = 'Asia/Tokyo'
# USE_I18N = True
# USE_TZ = True
# STATIC_URL = '/static/'
# STATIC_ROOT = BASE_DIR / 'staticfiles'
# # STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
# SESSION_COOKIE_SECURE = False
# CSRF_COOKIE_SECURE = False
# SECURE_SSL_REDIRECT = False
# SECURE_HSTS_SECONDS = 0
# SECURE_HSTS_INCLUDE_SUBDOMAINS = False
# SECURE_HSTS_PRELOAD = False
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",
#     "http://127.0.0.1:3000",
# ]
# CSRF_TRUSTED_ORIGINS = [
#     "http://localhost:3000",
#     "http://127.0.0.1:3000",
# ]
# CORS_ALLOW_CREDENTIALS = True
# REST_FRAMEWORK = {
#     "DEFAULT_AUTHENTICATION_CLASSES" : (
#         "rest_framework_simplejwt.authentication.JWTAuthentication",
#         "rest_framework.authentication.SessionAuthentication",
#     ),
#     "DEFAULT_PERMISSION_CLASSES": (
#         "rest_framework.permissions.IsAuthenticated",
#     ),
# }
# SIMPLE_JWT = {
#     "AUTH_HEADER_TYPES": ('Bearer',),
#     "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
#     "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
#     "ROTATE_REFRESH_TOKENS": True,
# }
# REST_AUTH_SERIALIZERS = {
#     "USER_DETAILS_SERIALIZER": "api.serializers.CustomUserDetairsSerializer"
# }
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# ADMIN_LOG_MODEL = 'adminlog.LogEntry'
# AES_SECRET_KEY = os.environ.get("AES_SECRET_KEY").encode()

# =========== 本番環境用のSetting ===========
from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv
load_dotenv()
import dj_database_url
if os.environ.get("DJANGO_SUPERUSER_PASSWORD"):
    os.environ["DJANGO_SUPERUSER_PASSWORD"] = os.environ["DJANGO_SUPERUSER_PASSWORD"]
def env_bool(name: str, default: bool = False) -> bool:
    val = os.environ.get(name)
    if val is None:
        return default
    return str(val).strip().lower() in ('1', 'true', 'yes', 'on')

def env_list(name: str, default: None):
    raw = os.environ.get(name)
    if not raw:
        return default or []
    return [s.strip() for s in raw.split(',')if s.strip()]

def must_get(name:str, default: None):
    v = os.environ.get(name)
    if v is None:
        return RuntimeError(f"Required environment variable missing: {name}")
    return v

AES_SECRET_KEY = os.environ.get("AES_SECRET_KEY", 'bWGJPRCeMAFUjLrEIlgIUzbs9kwD/n4G').encode()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-&i4%yfpcf=k)z-8cx3o=1+1&3wwtc0y+pgxboev_ymq*@p@o^!'
# SECRET_KEY=os.environ.get('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG=os.environ.get('DJANGO_DEBUG')
# ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "").split(",")
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-&i4%yfpcf=k)z-8cx3o=1+1&3wwtc0y+pgxboev_ymq*@p@o^!')

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
# DEBUG=os.environ.get('DJANGO_DEBUG')
DEBUG = env_bool('DJANGO_DEBUG', default=True)
ALLOWED_HOSTS = env_list("DJANGO_ALLOWED_HOSTS", default=['localhost', '127.0.0.1'])
# ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    "corsheaders",
    'api',
    # 'adminlog',
    'django_extensions',
    'adminlog.apps.AdminlogConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "django.contrib.sites",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "rest_framework.authtoken",
    "dj_rest_auth",
    "whitenoise.runserver_nostatic"

]
# SITE_ID = 1
SITE_ID = int(os.environ.get('DJANGO_SITE_ID', '1'))
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # "allauth.account.middleware.AuthenticationMiddleware",
    'allauth.account.middleware.AccountMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware"
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

db = None
# DATABASE_URL = os.environ.get('DATABASE_URL')
DATABASE_URL=os.environ.get('AZURE_DATABASE_URL')
if DATABASE_URL:
    db = dj_database_url.parse(DATABASE_URL, conn_max_age=600, ssl_require=env_bool("DB_SSL_REQUIRE", False))
else:
    pg_name = os.environ.get('PG_DB')
    pg_user = os.environ.get('PG_USER')
    pg_pass = os.environ.get('PG_PASSWORD')
    pg_host = os.environ.get('PG_HOST')
    pg_port = os.environ.get('PG_PORT')
    if all([pg_name, pg_host, pg_pass, pg_port, pg_user]):
        db =  {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('PG_DB'),
        'USER': os.environ.get('PG_USER'),
        'PASSWORD': os.environ.get('PG_PASSWORD'),
        'HOST': os.environ.get('PG_HOST'),
        'PORT': os.environ.get('PG_PORT')
    },
    # "default": dj_database_url.parse(os.environ['DATABASE_URL'], conn_max_age=600)
    else:
        db = {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
DATABASES = {
    'default': db
}
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': os.environ.get('POSTGRES_DB'),
#         'USER': os.environ.get('POSTGRES_USER'),
#         'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
#         'HOST': os.environ.get('POSTGRES_HOST'),
#         'PORT': os.environ.get('POSTGRES_PORT')
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_TZ = True
STATIC_ROOT = BASE_DIR / 'staticfiles'
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
STATIC_URL = '/staticfiles/'
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL='api.CustomUser'
# ADMIN_LOG_MODEL = 'adminlog.LogEntry'
ADMIN_LOG_MODEL = 'adminlog.LogEntry'
LOGIN_REDIRECT_URL='/'
LOGIN_URL='/accounts/login'
LOGOUT_REDIRECT_URL='/'
ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_SIGNUP_FIELDS = ['email*','password1*', 'password2*']
ACCOUNT_USER_MODEL_USERNAME_FIELD=None
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_VERIFICATION='mandatory'

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend"
)
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES" : (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.TokenAuthentication"
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
    ),
}
REST_AUTH_SERIALIZERS = {
    "USER_DETAILS_SERIALIZER": "api.serializers.CustomUserDetairsSerializer"
}
SIMPLE_JWT = {
    "AUTH_HEADER_TYPES": ('Bearer', ),
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    'ROTATE_REFRESH_TOKENS': True,     # ← 必須
}
CORS_ALLOWED_HEADERS = [
    "authorization",
    "content-type",
    "x-csrftoken",
    "x-requested-with",
    "accept",
    "accept-endcoding",
    "user-agent",
    # "origin"
]
CORS_ALLOWED_ORIGINS = env_list(
    "CORS_ALLOWED_ORIGINS",
    default=[
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "https://zealous-pond-03af90d00.2.azurestaticapps.net"
    ]
)

CSRF_TRUSTED_ORIGINS = env_list(
    "CSRF_TRUSTED_ORIGINS",
    default=[
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "https://zealous-pond-03af90d00.2.azurestaticapps.net"
    ]
)


CORS_ALLOW_CREDENTIALS = False  # Cookie を使う場合
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SECURE_SSL_REDIRECT = env_bool("SECURE_SSL_REDIRECT", default=False)
SECURE_HSTS_SECONDS=31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS=env_bool('SECURE_HSTS_INCLUDE_SUBDOMAINS', default=False)
SECURE_HSTS_PRELOAD=env_bool('SECURE_HSTS_PRELOAD', default=False)
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")